{"version":3,"file":"jsx-lexer.js","names":["JavascriptLexer","ts","unescape","JsxLexer","_JavascriptLexer","_inherits","_super","_createSuper","_this","options","arguments","length","undefined","_classCallCheck","call","componentFunctions","transSupportBasicHtmlNodes","transKeepBasicHtmlNodesFor","omitAttributes","attr","transIdentityFunctionsToIgnore","_createClass","key","value","extract","content","_this2","filename","keys","parseCommentNode","createCommentNodeParser","parseTree","node","entry","kind","SyntaxKind","CallExpression","entries","expressionExtractor","push","apply","_toConsumableArray","TaggedTemplateExpression","taggedTemplateExpressionExtractor","JsxElement","jsxExtractor","JsxSelfClosingElement","forEachChild","sourceFile","createSourceFile","ScriptTarget","Latest","keysWithNamespace","setNamespaces","keysWithPrefixes","setKeyPrefixes","sourceText","_this3","tagNode","openingElement","getPropValue","attributeName","_attribute$initialize","attribute","attributes","properties","find","name","text","initializer","expression","Identifier","emit","concat","getKey","includes","expressionToName","tagName","namespace","forEach","property","JsxSpreadAttribute","TrueKeyword","FalseKeyword","cleanMultiLineCode","slice","pos","end","nodeAsString","nodeToString","defaultsProp","defaultValue","shouldUnescape","defaultNamespace","_this4","children","parseChildren","elemsToString","map","child","index","type","useTagName","isBasic","elementName","childrenString","selfClosing","Error","join","replace","_this5","JsxText","element","escapedText","hasDynamicChildren","prop","JsxAttribute","JsxExpression","AsExpression","StringLiteral","ObjectLiteralExpression","nonFormatProperties","filter","formatProperty","slicedExpression","attrValues","_attr$name","_attr$initializer$exp","_attr$initializer$exp2","some","default"],"sources":["../../src/lexers/jsx-lexer.js"],"sourcesContent":["import JavascriptLexer from './javascript-lexer.js'\nimport ts from 'typescript'\nimport { unescape } from '../helpers.js'\n\nexport default class JsxLexer extends JavascriptLexer {\n  constructor(options = {}) {\n    super(options)\n\n    this.componentFunctions = options.componentFunctions || ['Trans']\n    this.transSupportBasicHtmlNodes =\n      options.transSupportBasicHtmlNodes || false\n    this.transKeepBasicHtmlNodesFor = options.transKeepBasicHtmlNodesFor || [\n      'br',\n      'strong',\n      'i',\n      'p',\n    ]\n    this.omitAttributes = [this.attr, 'ns', 'defaults']\n    this.transIdentityFunctionsToIgnore =\n      options.transIdentityFunctionsToIgnore || []\n  }\n\n  extract(content, filename = '__default.jsx') {\n    const keys = []\n\n    const parseCommentNode = this.createCommentNodeParser()\n\n    const parseTree = (node) => {\n      let entry\n\n      parseCommentNode(keys, node, content)\n\n      switch (node.kind) {\n        case ts.SyntaxKind.CallExpression:\n          const entries = this.expressionExtractor.call(this, node)\n          if (entries) {\n            keys.push(...entries)\n          }\n          break\n        case ts.SyntaxKind.TaggedTemplateExpression:\n          entry = this.taggedTemplateExpressionExtractor.call(this, node)\n          break\n        case ts.SyntaxKind.JsxElement:\n          entry = this.jsxExtractor.call(this, node, content)\n          break\n        case ts.SyntaxKind.JsxSelfClosingElement:\n          entry = this.jsxExtractor.call(this, node, content)\n          break\n      }\n\n      if (entry) {\n        keys.push(entry)\n      }\n\n      node.forEachChild(parseTree)\n    }\n\n    const sourceFile = ts.createSourceFile(\n      filename,\n      content,\n      ts.ScriptTarget.Latest\n    )\n    parseTree(sourceFile)\n\n    const keysWithNamespace = this.setNamespaces(keys)\n    const keysWithPrefixes = this.setKeyPrefixes(keysWithNamespace)\n\n    return keysWithPrefixes\n  }\n\n  jsxExtractor(node, sourceText) {\n    const tagNode = node.openingElement || node\n\n    const getPropValue = (node, attributeName) => {\n      const attribute = node.attributes.properties.find(\n        (attr) => attr.name !== undefined && attr.name.text === attributeName\n      )\n      if (!attribute) {\n        return undefined\n      }\n\n      if (attribute.initializer.expression?.kind === ts.SyntaxKind.Identifier) {\n        this.emit(\n          'warning',\n          `\"${attributeName}\" prop is not a string literal: ${attribute.initializer.expression.text}`\n        )\n\n        return undefined\n      }\n\n      return attribute.initializer.expression\n        ? attribute.initializer.expression.text\n        : attribute.initializer.text\n    }\n\n    const getKey = (node) => getPropValue(node, this.attr)\n\n    if (\n      this.componentFunctions.includes(this.expressionToName(tagNode.tagName))\n    ) {\n      const entry = {}\n      entry.key = getKey(tagNode)\n\n      const namespace = getPropValue(tagNode, 'ns')\n      if (namespace) {\n        entry.namespace = namespace\n      }\n\n      tagNode.attributes.properties.forEach((property) => {\n        if (property.kind === ts.SyntaxKind.JsxSpreadAttribute) {\n          this.emit(\n            'warning',\n            `Component attribute is a JSX spread attribute : ${property.expression.text}`\n          )\n          return\n        }\n\n        if (this.omitAttributes.includes(property.name.text)) {\n          return\n        }\n\n        if (property.initializer) {\n          if (property.initializer.expression) {\n            if (\n              property.initializer.expression.kind === ts.SyntaxKind.TrueKeyword\n            ) {\n              entry[property.name.text] = true\n            } else if (\n              property.initializer.expression.kind ===\n              ts.SyntaxKind.FalseKeyword\n            ) {\n              entry[property.name.text] = false\n            } else {\n              entry[property.name.text] = `{${\n                property.initializer.expression.text ||\n                this.cleanMultiLineCode(\n                  sourceText.slice(\n                    property.initializer.expression.pos,\n                    property.initializer.expression.end\n                  )\n                )\n              }}`\n            }\n          } else {\n            entry[property.name.text] = property.initializer.text\n          }\n        } else entry[property.name.text] = true\n      })\n\n      const nodeAsString = this.nodeToString.call(this, node, sourceText)\n      const defaultsProp = getPropValue(tagNode, 'defaults')\n      let defaultValue = defaultsProp || nodeAsString\n\n      // If `shouldUnescape` is not true, it means the value cannot contain HTML entities,\n      // so we need to unescape these entities now so that they can be properly rendered later\n      if (entry.shouldUnescape !== true) {\n        defaultValue = unescape(defaultValue)\n      }\n\n      if (defaultValue !== '') {\n        entry.defaultValue = defaultValue\n\n        if (!entry.key) {\n          // If there's no key, default to the stringified unescaped node, then to the default value:\n          // https://github.com/i18next/react-i18next/blob/95f9c6a7b602a7b1fd33c1ded6dcfc23a52b853b/src/TransWithoutContext.js#L337\n          entry.key = unescape(nodeAsString) || entry.defaultValue\n        }\n      }\n\n      return entry.key ? entry : null\n    } else if (tagNode.tagName.text === 'Interpolate') {\n      const entry = {}\n      entry.key = getKey(tagNode)\n      return entry.key ? entry : null\n    } else if (tagNode.tagName.text === 'Translation') {\n      const namespace = getPropValue(tagNode, 'ns')\n      if (namespace) {\n        this.defaultNamespace = namespace\n      }\n    }\n  }\n\n  nodeToString(node, sourceText) {\n    const children = this.parseChildren.call(\n      this,\n      node,\n      node.children,\n      sourceText\n    )\n\n    const elemsToString = (children) =>\n      children\n        .map((child, index) => {\n          switch (child.type) {\n            case 'js':\n            case 'text':\n              return child.content\n            case 'tag':\n              const useTagName =\n                child.isBasic &&\n                this.transSupportBasicHtmlNodes &&\n                this.transKeepBasicHtmlNodesFor.includes(child.name)\n              const elementName = useTagName ? child.name : index\n              const childrenString = elemsToString(child.children)\n              return childrenString || !(useTagName && child.selfClosing)\n                ? `<${elementName}>${childrenString}</${elementName}>`\n                : `<${elementName} />`\n            default:\n              throw new Error('Unknown parsed content: ' + child.type)\n          }\n        })\n        .join('')\n\n    return elemsToString(children)\n  }\n\n  cleanMultiLineCode(text) {\n    return text\n      .replace(/(^(\\n|\\r)\\s*)|((\\n|\\r)\\s*$)/g, '')\n      .replace(/(\\n|\\r)\\s*/g, ' ')\n  }\n\n  parseChildren(node, children = [], sourceText) {\n    return children\n      .map((child) => {\n        if (child.kind === ts.SyntaxKind.JsxText) {\n          return {\n            type: 'text',\n            content: this.cleanMultiLineCode(child.text),\n          }\n        } else if (\n          child.kind === ts.SyntaxKind.JsxElement ||\n          child.kind === ts.SyntaxKind.JsxSelfClosingElement\n        ) {\n          const element = child.openingElement || child\n          const name = element.tagName.escapedText\n          const isBasic = !element.attributes.properties.length\n          const hasDynamicChildren = element.attributes.properties.find(\n            (prop) =>\n              prop.kind === ts.SyntaxKind.JsxAttribute &&\n              prop.name.escapedText === 'i18nIsDynamicList'\n          )\n          return {\n            type: 'tag',\n            children: hasDynamicChildren\n              ? []\n              : this.parseChildren(child, child.children, sourceText),\n            name,\n            isBasic,\n            selfClosing: child.kind === ts.SyntaxKind.JsxSelfClosingElement,\n          }\n        } else if (child.kind === ts.SyntaxKind.JsxExpression) {\n          // strip empty expressions\n          if (!child.expression) {\n            return {\n              type: 'text',\n              content: '',\n            }\n          }\n\n          // simplify trivial expressions, like TypeScript typecasts\n          while (child.expression.kind === ts.SyntaxKind.AsExpression) {\n            child = child.expression\n          }\n\n          // Sometimes, we might want to wrap ObjectExpressions in a function\n          // for typechecker compatibility: e.g.,\n          //\n          // Instead of\n          // `<Trans>Hello, <Link to=\"/\">{{ name }}</Link></Trans>`\n          // we might want:\n          // `<Trans>Hello, <Link to=\"/\">{castToString({ name })}</Link></Trans>`\n          //\n          // because that way, we can have {castToString(...)} be typed\n          // in a a way to return a string, which would be type-compatible\n          // with `children?: React.ReactNode`\n          //\n          // In these cases, we want to look at the object expressions within\n          // the function call to extract the variables\n          if (\n            child.expression.kind === ts.SyntaxKind.CallExpression &&\n            child.expression.expression.kind === ts.SyntaxKind.Identifier &&\n            this.transIdentityFunctionsToIgnore.includes(\n              child.expression.expression.escapedText\n            ) &&\n            child.expression.arguments.length >= 1\n          ) {\n            child = { expression: child.expression.arguments[0] }\n          }\n\n          if (child.expression.kind === ts.SyntaxKind.StringLiteral) {\n            return {\n              type: 'text',\n              content: child.expression.text,\n            }\n          }\n\n          // strip properties from ObjectExpressions\n          // annoying (and who knows how many other exceptions we'll need to write) but necessary\n          else if (\n            child.expression.kind === ts.SyntaxKind.ObjectLiteralExpression\n          ) {\n            // i18next-react only accepts two props, any random single prop, and a format prop\n\n            const nonFormatProperties = child.expression.properties.filter(\n              (prop) => prop.name.text !== 'format'\n            )\n            const formatProperty = child.expression.properties.find(\n              (prop) => prop.name.text === 'format'\n            )\n\n            // more than one property throw a warning in i18next-react, but still works as a key\n            if (nonFormatProperties.length > 1) {\n              this.emit(\n                'warning',\n                `The passed in object contained more than one variable - the object should look like {{ value, format }} where format is optional.`\n              )\n\n              return {\n                type: 'text',\n                content: '',\n              }\n            }\n\n            // This matches the behaviour of the Trans component in i18next as of v13.0.2:\n            // https://github.com/i18next/react-i18next/blob/0a4681e428c888fe986bcc0109eb19eab6ff2eb3/src/TransWithoutContext.js#L88\n            const value = formatProperty\n              ? `${nonFormatProperties[0].name.text}, ${formatProperty.initializer.text}`\n              : nonFormatProperties[0].name.text\n\n            return {\n              type: 'js',\n              content: `{{${value}}}`,\n            }\n          }\n\n          // slice on the expression so that we ignore comments around it\n          const slicedExpression = sourceText.slice(\n            child.expression.pos,\n            child.expression.end\n          )\n\n          const tagNode = node.openingElement || node\n          const attrValues = tagNode.attributes.properties\n            .filter((attr) => [this.attr, 'defaults'].includes(attr.name?.text))\n            .map(\n              (attr) =>\n                attr.initializer.expression?.text ?? attr.initializer.text\n            )\n\n          if (attrValues.some((attr) => !attr)) {\n            this.emit('warning', `Child is not literal: ${slicedExpression}`)\n          }\n\n          return {\n            type: 'js',\n            content: `{${slicedExpression}}`,\n          }\n        } else {\n          throw new Error('Unknown ast element when parsing jsx: ' + child.kind)\n        }\n      })\n      .filter((child) => child.type !== 'text' || child.content)\n  }\n}\n"],"mappings":"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"}